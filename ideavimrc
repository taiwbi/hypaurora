" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here: https://jb.gg/h38q75
" Find more examples here: https://jb.gg/share-ideavimrc

""" Options ----------------------------------------------------------
let mapleader=" "
set scrolloff=14
set incsearch
set relativenumber
set clipboard=unnamedplus
set which-key
set notimeout

" Don't use Ex mode, use Q for formatting.
map Q gq

Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-commentary'
Plug 'preservim/nerdtree'

" INFO: VIM Mappings -------------------------------------------------------

nnoremap Y y$

" INFO: NerdTree Configuration ---------------------------------------------

" Set j to move down in NERDTree
let g:NERDTreeMapJumpDown = 'j'
" Set k to move up in NERDTree
let g:NERDTreeMapJumpUp = 'k'
" Set l to open directories and files in NERDTree
let g:NERDTreeMapOpenSplit = 'l'
let g:NERDTreeMapOpenVSplit = 'l'
let g:NERDTreeMapOpenInTab = 'l'
let g:NERDTreeMapPreview = 'l'
" Set h to close directories in NERDTree
let g:NERDTreeMapCloseDir = 'h'
let g:NERDTreeMapCloseAllNodes = 'h'

" INFO: General ------------------------------------------------------------

" Resize Up
map <C-Up> <Action>(StretchSplitToTop)
" Resize Down
map <C-Down> <Action>(StretchSplitToBottom)
" Resize Left
map <C-Left> <Action>(StretchSplitToLeft)
" Resize Right
map <C-Right> <Action>(StretchSplitToRight)
" Up Window
noremap <C-k> <C-w>k
" Down Window
noremap <C-j> <C-w>j
" Left Window
noremap <C-h> <C-w>h
" Right Window
noremap <C-l> <C-w>l
" Force Write TODO:
" Force Quit TODO:
" New File TODO:
" Close buffer
map <leader>c <Action>(CloseContent)
" Next Tab
map <Tab> <Action>(NextTab)
" Previous Tab
map <S-Tab> <Action>(PreviousTab)
" Comment
map <leader>/ <Action>(CommentByLineComment)
" Horizontal Split	
map <Bar> <Action>(SplitVertically)
" Vertical Split
map \ <Action>(SplitHorizontally)

" INFO: Completion ---------------------------------------------------------

" Open completion menu
" Crtl + Space IDE mappings - default
" Hide completion  WARN: Does not have an action
" map  <Action>()

" INFO: Debugger Manager ---------------------------------------------------

" Start/Continue Debugger
map <leader>dc <Action>(Debug)
map <leader>dc <Action>(Resume)
" Pause Debugger
map <leader>dp <Action>(Pause)
" Restart Debugger
map <leader>dr <Action>(Rerun)
" Run Debugger to Cursor
map <leader>ds <Action>(ToggleLineBreakpoint) <Action>(Debug)
" Close Debugger Session
map <leader>dq <Action>(Stop)
" Terminate Debugger
map <leader>dQ <Action>(Stop)
" Toggle Breakpoint
map <leader>db <Action>(ToggleLineBreakpoint)
" Conditional Breakpoint
map <leader>dC <Action>(ToggleLineBreakpoint) <Action>(ViewBreakpoints)
" Clear Breakpoints
map <leader>dB <Action>(Debugger.RemoveAllBreakpoints)
" Step Over
map <leader>do <Action>(StepOver)
" Step Into
map <leader>di <Action>(StepInto)
" Step Out
map <leader>dO <Action>(StepOut)
" Evaluate Expression  WARN: Does not have an action
" Toggle REPL  WARN: Does not have an action
" Toggle Debugger UI
map <leader>du <Action>(ActivateDebugToolWindow)
" Debugger Hover
" map  <Action>()

" INFO: Telescope Mappings -------------------------------------------------

" Resume previous search  WARN: Does not have an action
" Marks  WARN: Does not have an action
" Buffers
map <leader>fb <Action>(Switcher)
" Word at cursor  WARN: Does not have an action
" Commands
map <leader>fC <Action>(GotoAction)
" Find files
map <leader>ff <Action>(GotoFile)
" Find files (include hidden files)
map <leader>fF <Action>(GotoFile)
" Help Tags
map <leader>fh <Action>(HelpTopics)
" Keymaps  WARN: Does not have an action
" Man Pages  WARN: Does not have an action
" Notifications
map <leader>fn <Action>(ActivateNotificationsToolWindow)
" Old Files  WARN: Does not have an action
" Registers  WARN: Does not have an action
" Colorschemes
map <leader>ft <Action>(ChangeLaf)
" Live Grep
map <leader>fw <Action>(TextSearchAction)
" Live Grep (include hidden files)	
map <leader>fW <Action>(TextSearchAction)
" Git Branches
map <leader>gb <Action>(ActivateVersionControlToolWindow)
" Git Commits (repository)
map <leader>gc <Action>(ActivateVersionControlToolWindow)
" Git Commits (current file)
map <leader>gC <Action>(Vcs.ShowTabbedFileHistory)
" Git Status
map <leader>gt <Action>(ActivateCommitToolWindow)
" LSP Symbols
map <leader>ls <Action>(ActivateStructureToolWindow)
" LSP Workspace Symbols
map <leader>lG <Action>(GotoSymbol)

" INFO: LSP Actions --------------------------------------------------------

" Hover Document
map K <Action>(ShowHoverInfo)
" Reformat Code
map <leader>lf <Action>(ReformatCode)
" Symbols Outline
map <leader>lS <Action>(ActivateStructureToolWindow)
" Line Diagnostics WARN: Does not have an action
" All Diagnostics
map <leader>lD <Action>(ActivateProblemsViewToolWindow)
" Code Actions
map <leader>la <Action>(ShowIntentionActions)
" Signature Help WARN: Does not have an action
" Rename
map <leader>lr <Action>(RenameElement)
map grn <Action>(RenameElement)
" Document Symbol
map <leader>ls <Action>(FileStructurePopup)
" Workspace Symbols  WARN: Does not have an action
" Diagnostic Next WARN: Does not have an action
" Diagnostics Previous WARN: Does not have an action
" Declaration
map gD <Action>(GotoDeclaration)
" Type Definition
map gy <Action>(GotoTypeDeclaration)
" Definition WARN: Does not have an action
" Implementation
map gI <Action>(GotoImplementation)
" References WARN: Does not have an action

" AI Actions ---------------------------------------------------------
" New Contiue Chat
map <leader>Pc <Action>(continue.newContinueSession)
" Rewrite selected code
vmap <leader>Pr <Action>(continue.inlineEdit)
" Add content to chat
vmap <leader>Pi <Action>(continue.focusContinueInput)

" ----- --------------------------------------------------------------
" Other --------------------------------------------------------------

map z= <Action>(ShowIntentionActions)
map <C-h> <Action>(Back)
" Toggle explorer
map <leader>e <Action>(ActivateProjectToolWindow)
" New file
map <leader>n <Action>(FileChooser.NewFile)
" Quit Window
map <leader>q <Action>(Exit)
" Save
map <leader>w <Action>(SaveAll)
" Show the Database UI tooltip
map <leader>Db <Action>(ActivateDatabaseToolWindow)
" Tool winsows
map <leader>tf <Action>(ActivateTerminalToolWindow)
map <leader>th <Action>(ActivateTerminalToolWindow)
map <leader>tv <Action>(ActivateTerminalToolWindow)

map <leader>zz <Action>(ToggleZenMode)
map <leader>zd <Action>(ToggleDistractionFreeMode)


" General Mappings DONE
" Buffers
" List Management
" Better Escape
" Completion
" Neo-Tree
" Dashboard Mappings
" Session Manager Mappings
" Package Management Mappings
" LSP Mappings DONE
" Debugger Mappings DONE
" Telescope Mappings DONE
" Terminal Mappings
" UI/UX Mappings








""" Which-Key ========================================================
" NERDTree
let g:WhichKeyDesc_NERDTreeDown = "j Move down in NERDTree"
let g:WhichKeyDesc_NERDTreeUp = "k Move up in NERDTree"
let g:WhichKeyDesc_NERDTreeOpen = "l Open in NERDTree"
let g:WhichKeyDesc_NERDTreeClose = "h Close in NERDTree"

" Window Navigation and Resizing
let g:WhichKeyDesc_ResizeUp = "<C-Up> Resize Up"
let g:WhichKeyDesc_ResizeDown = "<C-Down> Resize Down"
let g:WhichKeyDesc_ResizeLeft = "<C-Left> Resize Left"
let g:WhichKeyDesc_ResizeRight = "<C-Right> Resize Right"
let g:WhichKeyDesc_WindowUp = "<C-k> Move to upper window"
let g:WhichKeyDesc_WindowDown = "<C-j> Move to lower window"
let g:WhichKeyDesc_WindowLeft = "<C-h> Move to left window"
let g:WhichKeyDesc_WindowRight = "<C-l> Move to right window"

" Buffer and Tab Management
let g:WhichKeyDesc_CloseBuffer = "<leader>c Close buffer"
let g:WhichKeyDesc_NextTab = "<Tab> Next Tab"
let g:WhichKeyDesc_PreviousTab = "<S-Tab> Previous Tab"

" Splitting
let g:WhichKeyDesc_SplitVertical = "<Bar> Split vertically"
let g:WhichKeyDesc_SplitHorizontal = "\ Split horizontally"

" Commenting
let g:WhichKeyDesc_Comment = "<leader>/ Comment line"

" Debugger
let g:WhichKeyDesc_DebuggerPrefix = "<leader>d +debugger"
let g:WhichKeyDesc_DebuggerStart = "<leader>dc Start/Continue Debugger"
let g:WhichKeyDesc_DebuggerPause = "<leader>dp Pause Debugger"
let g:WhichKeyDesc_DebuggerRestart = "<leader>dr Restart Debugger"
let g:WhichKeyDesc_DebuggerRunToCursor = "<leader>ds Run Debugger to Cursor"
let g:WhichKeyDesc_DebuggerClose = "<leader>dq Close Debugger Session"
let g:WhichKeyDesc_DebuggerTerminate = "<leader>dQ Terminate Debugger"
let g:WhichKeyDesc_DebuggerToggleBreakpoint = "<leader>db Toggle Breakpoint"
let g:WhichKeyDesc_DebuggerConditionalBreakpoint = "<leader>dC Conditional Breakpoint"
let g:WhichKeyDesc_DebuggerClearBreakpoints = "<leader>dB Clear Breakpoints"
let g:WhichKeyDesc_DebuggerStepOver = "<leader>do Step Over"
let g:WhichKeyDesc_DebuggerStepInto = "<leader>di Step Into"
let g:WhichKeyDesc_DebuggerStepOut = "<leader>dO Step Out"
let g:WhichKeyDesc_DebuggerToggleUI = "<leader>du Toggle Debugger UI"

" Telescope-like Mappings
let g:WhichKeyDesc_TelescopePrefix = "<leader>f +find"
let g:WhichKeyDesc_TelescopeBuffers = "<leader>fb Find buffers"
let g:WhichKeyDesc_TelescopeCommands = "<leader>fC Find commands"
let g:WhichKeyDesc_TelescopeFindFiles = "<leader>ff Find files"
let g:WhichKeyDesc_TelescopeFindFilesHidden = "<leader>fF Find files (include hidden)"
let g:WhichKeyDesc_TelescopeHelp = "<leader>fh Find help"
let g:WhichKeyDesc_TelescopeNotifications = "<leader>fn Find notifications"
let g:WhichKeyDesc_TelescopeColorschemes = "<leader>ft Find themes"
let g:WhichKeyDesc_TelescopeLiveGrep = "<leader>fw Find text"
let g:WhichKeyDesc_TelescopeLiveGrepHidden = "<leader>fW Find text (include hidden)"

" Git
let g:WhichKeyDesc_GitPrefix = "<leader>g +git"
let g:WhichKeyDesc_GitBranches = "<leader>gb Git branches"
let g:WhichKeyDesc_GitCommits = "<leader>gc Git commits (repository)"
let g:WhichKeyDesc_GitCommitsFile = "<leader>gC Git commits (current file)"
let g:WhichKeyDesc_GitStatus = "<leader>gt Git status"

" LSP
let g:WhichKeyDesc_LSPPrefix = "<leader>l +lsp"
let g:WhichKeyDesc_LSPHover = "K Show hover info"
let g:WhichKeyDesc_LSPReformat = "<leader>lf Reformat code"
let g:WhichKeyDesc_LSPSymbolsOutline = "<leader>lS Symbols outline"
let g:WhichKeyDesc_LSPDiagnostics = "<leader>lD Show all diagnostics"
let g:WhichKeyDesc_LSPCodeActions = "<leader>la Show code actions"
let g:WhichKeyDesc_LSPRename = "<leader>lr Rename symbol"
let g:WhichKeyDesc_LSPDocumentSymbol = "<leader>ls Show document symbols"

" Go to
let g:WhichKeyDesc_GotoDeclaration = "gD Go to declaration"
let g:WhichKeyDesc_GotoTypeDefinition = "gy Go to type definition"
let g:WhichKeyDesc_GotoImplementation = "gI Go to implementation"

" Other
let g:WhichKeyDesc_ShowIntentionActions = "z= Show intention actions"
let g:WhichKeyDesc_NavigateBack = "<C-h> Navigate back"
let g:WhichKeyDesc_ToggleExplorer = "<leader>e Toggle explorer"
let g:WhichKeyDesc_NewFile = "<leader>n New file"
let g:WhichKeyDesc_Quit = "<leader>q Quit"
let g:WhichKeyDesc_Save = "<leader>w Save all"
let g:WhichKeyDesc_DatabaseUI = "<leader>Db Show Database UI"

" Tool Windows
let g:WhichKeyDesc_ToolWindowsPrefix = "<leader>t +tool windows"
let g:WhichKeyDesc_TerminalToolWindow = "<leader>tf Open terminal"

" Zen Mode
let g:WhichKeyDesc_ToggleZenMode = "<leader>zz Toggle Zen Mode"
let g:WhichKeyDesc_ToggleDistractionFreeMode = "<leader>zd Toggle Distraction Free Mode"
