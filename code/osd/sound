#!/usr/bin/env bash

# Alternative polling-based approach for Eww volume OSD

OSD_WINDOW="sound_osd"
TIMEOUT=2
POLL_INTERVAL=0.2
VOLUME_FILE="/tmp/eww_osd_volume.state"
TIMER_FILE="/tmp/eww_osd_timer.state"
MUTE_FILE="/tmp/eww_osd_mute.state"

# Clean up when script exits
trap 'rm -f "$VOLUME_FILE" "$TIMER_FILE" "$MUTE_FILE"; eww close "$OSD_WINDOW" 2>/dev/null' EXIT

# Function to get current volume level
get_volume() {
    pactl get-sink-volume @DEFAULT_SINK@ | grep -o '[0-9]*%' | head -1 | tr -d '%'
}

# Function to get current mute state
get_mute_state() {
    pactl get-sink-mute @DEFAULT_SINK@ | grep -o 'yes\|no'
}

# Function to show OSD
show_osd() {
    if ! eww active-windows | grep -q "^${OSD_WINDOW}:"; then
        eww open "$OSD_WINDOW"
    fi
}

# Function to hide OSD
hide_osd() {
    eww close "$OSD_WINDOW" 2>/dev/null
}

# Function to check if OSD is active
is_osd_active() {
    eww active-windows | grep -q "^${OSD_WINDOW}:"
}

# Initialize
previous_volume=$(get_volume)
previous_mute=$(get_mute_state)
echo "$previous_volume" > "$VOLUME_FILE"
echo "$previous_mute" > "$MUTE_FILE"

# Main polling loop
while true; do
    current_volume=$(get_volume)
    current_mute=$(get_mute_state)
    
    # Check if volume changed or mute state changed
    if ([ "$current_volume" != "$previous_volume" ] || [ "$current_mute" != "$previous_mute" ]) && [ -n "$current_volume" ] && [ -n "$current_mute" ]; then
        # Volume or mute state changed, show OSD
        show_osd

        echo "Displaying Sound OSD"
        
        # Update stored volume and mute state
        previous_volume="$current_volume"
        previous_mute="$current_mute"
        echo "$current_volume" > "$VOLUME_FILE"
        echo "$current_mute" > "$MUTE_FILE"
        
        # Set timer
        echo "$(date +%s)" > "$TIMER_FILE"
    fi
    
    # Check if we should hide the OSD
    if is_osd_active && [ -f "$TIMER_FILE" ]; then
        timer_start=$(cat "$TIMER_FILE")
        current_time=$(date +%s)
        elapsed=$((current_time - timer_start))

        if [ "$elapsed" -ge "$TIMEOUT" ]; then
            hide_osd
            rm -f "$TIMER_FILE"
        fi
    fi
    
    sleep "$POLL_INTERVAL"
done
