#!/usr/bin/env bash
set -euo pipefail

# Configuration
readonly OUTPUT_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/background"
readonly TARGET_WIDTH=1920
readonly TARGET_HEIGHT=1080
readonly WALLPAPER_MANAGER="hyprpaper"

# Color codes for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Logging functions
log_info()  { echo -e "${GREEN}[INFO]${NC} $*"; }
log_error() { echo -e "${RED}[ERROR]${NC} $*" >&2; }
log_warn()  { echo -e "${YELLOW}[WARN]${NC} $*"; }

# Desktop notification
notify_user() {
    local title="$1"
    local message="$2"
    command -v notify-send &>/dev/null && notify-send "$title" "$message"
}

# Check dependencies
check_dependencies() {
    local missing_deps=()
    for cmd in ffmpeg ffprobe pgrep; do
        if ! command -v "$cmd" &>/dev/null; then
            missing_deps+=("$cmd")
        fi
    done
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Missing required dependencies: ${missing_deps[*]}"
        log_error "Install with: sudo apt install ffmpeg procps"
        exit 1
    fi
}

# Validate input file
validate_image() {
    local file="$1"
    if [[ ! -f "$file" ]]; then
        log_error "File does not exist: $file"
        return 1
    fi
    # Use ffprobe to check if file is a valid image/video
    if ! ffprobe -v error -select_streams v:0 -show_entries stream=codec_type -of default=noprint_wrappers=1:nokey=1 "$file" &>/dev/null; then
        log_error "Not a valid image/video file: $file"
        return 1
    fi
    
    return 0
}

# Process image with ffmpeg (writes to a .png temp file, then moves to extensionless destination)
process_image() {
    local input="$1"
    local dest_noext="$2"

    log_info "Processing image: $(basename "$input")"

    # Ensure parent directory exists
    local dest_dir
    dest_dir="$(dirname "$dest_noext")"
    mkdir -p "$dest_dir"

    # Create a temporary PNG file (in same directory to keep mv atomic on same filesystem)
    local tmp_png
    tmp_png="$(mktemp "${dest_dir}/.tmp_bg_XXXXXX.png")" || {
        log_error "Failed to create temporary file"
        return 1
    }

    # Ensure temporary file is removed on failure or exit
    cleanup() {
        local rc=$?
        [[ -f "$tmp_png" ]] && rm -f "$tmp_png" || true
        return $rc
    }
    trap 'cleanup' EXIT

    # Use ffmpeg to resize, crop, and export as PNG (let ffmpeg infer format from .png extension)
    if ffmpeg -y -loglevel error \
        -i "$input" \
        -vf "scale=w='max(${TARGET_WIDTH},iw*max(${TARGET_WIDTH}/iw,${TARGET_HEIGHT}/ih))':h='max(${TARGET_HEIGHT},ih*max(${TARGET_WIDTH}/iw,${TARGET_HEIGHT}/ih))',crop=${TARGET_WIDTH}:${TARGET_HEIGHT}" \
        -pix_fmt rgb24 \
        -compression_level 6 \
        "$tmp_png"; then

        if mv -f "$tmp_png" "$dest_noext"; then
            # Remove trap cleanup because move succeeded and tmp_png no longer exists
            trap - EXIT
            log_info "Image saved to: $dest_noext"
            return 0
        else
            log_error "Failed to move temporary PNG to destination"
            return 1
        fi
    else
        log_error "Failed to process image with ffmpeg"
        return 1
    fi
}

# Restart wallpaper manager
restart_wallpaper_manager() {
    local manager="$1"
    
    if pgrep -x "$manager" >/dev/null; then
        log_info "Stopping $manager..."
        if killall "$manager" 2>/dev/null; then
            # Wait for process to terminate
            local timeout=5
            while pgrep -x "$manager" >/dev/null && ((timeout > 0)); do
                sleep 0.2
                ((timeout--))
            done
            
            if pgrep -x "$manager" >/dev/null; then
                log_warn "$manager did not terminate gracefully, forcing..."
                killall -9 "$manager" 2>/dev/null || true
            fi
        fi
    fi
    
    # Start wallpaper manager
    log_info "Starting $manager..."
    if command -v "$manager" &>/dev/null; then
        nohup "$manager" &>/dev/null &
        disown
        log_info "$manager started successfully"
    else
        log_error "$manager not found in PATH"
        return 1
    fi
}

# Main function
main() {
    # Check if an image file is provided
    if [[ $# -eq 0 ]]; then
        log_error "No file provided"
        exit 1
    fi
    
    local input_file="$1"
    
    # Check dependencies
    check_dependencies
    
    # Validate input
    if ! validate_image "$input_file"; then
        exit 1
    fi
    
    # Process the image
    if ! process_image "$input_file" "$OUTPUT_FILE"; then
        exit 1
    fi
    
    # Restart wallpaper manager
    if ! restart_wallpaper_manager "$WALLPAPER_MANAGER"; then
        log_warn "Failed to restart $WALLPAPER_MANAGER, but image was processed successfully"
        exit 0
    fi
    
    log_info "Wallpaper updated successfully!"
    notify_user "Wallpaper Updated" "Background image has been changed."
}

main "$@"
