;; --- Variables ---
(defpoll time :interval "30s" `scripts/get-time`)
(defpoll hour :interval "2m" `date +"%H"`)
(defpoll minuet :interval "30s" `date +"%M"`)
(defpoll date :interval "1h" `scripts/get-date`)
(defpoll battery :interval "60s" `scripts/get-battery`)
(deflisten power_profile :initial "balanced" "scripts/get-power-profile")
(deflisten wifi :initial "Disconnected" "scripts/get-wifi --complete")
(deflisten volume :initial '{"status": "Unknown", "percentage": -1}' "scripts/get-volume")
(deflisten brightness :initial '{"percentage": "Unknown"}' "scripts/get-brightness")
(deflisten media :initial "{}" "scripts/get-media")
(deflisten touchpad_state :initial "true" "scripts/get-touchpad")
(deflisten keyboard_layout :initial "English (US)" "scripts/get-keyboard")

;; Wifi List Variables
(defpoll wifi_list :interval "20s" "scripts/get-wifi-list")
(defvar ssid_for_prompt "")
(defvar password_input "")


;; --- Reusable Icon Widget ---
(defwidget icon [path]
  (image :path path 
         :class "icon-image"
         :image-width 18
         :image-height 18)
)


;; --- WIFI WIDGETS ---
(defwidget wifi_network_entry [network]
  (button :class "button wifi-entry" :onclick "scripts/handle-wifi-click '${network.ssid}'"
    (box :orientation "h" :space-evenly false :spacing 10
      (icon :path "./icons/radar.svg")
      (label :class "wifi-ssid ${wifi == network.ssid ? 'active' : ''}" :text "${network.ssid}" :limit-width 20 :halign "start")
      (box :orientation "h" :space-evenly false :spacing 5 :halign "end"
        (image :class "wifi-lock" :path "./icons/lock.svg" :image-width 18 :image-height 18 :visible {network.secure})
      )
    )
  )
)

;; --- Vertical Bar Window ---
(defwindow vertical_bar
  :monitor 0
  :exclusive true
  :windowtype "dock"
  :geometry (geometry :x "6px" 
                      :y "0px" 
                      :width "48px" 
                      :height "1070px"
                      :anchor "left center")
  :stacking "fg"
  :focusable false
  :exclusive true
  :namespace "bar"
  (box :class "vertical-bar" :orientation "v" :space-evenly false
    ;; Logo at the top
    (image :path  "./icons/2B.png" 
          :class "icon-image"
          :image-width 32
          :image-height 32)
    
    ;; Media player controls at the center
    (box :class "media-controls-container" :orientation "v" :spacing 5
      (button :class "button media-button" :onclick "playerctl previous" 
        (icon :path "./icons/previous.svg")
      )
      (button :class "button media-button" :onclick "playerctl play-pause"
        (icon :path {media.status == "Playing" ? "./icons/pause.svg" : "./icons/play.svg"})
      )
      (button :class "button media-button" :onclick "playerctl next" 
        (icon :path "./icons/next.svg")
      )
      (button :class "button media-button shuffle ${media.shuffle == true ? 'active' : ''}"
              :onclick "playerctl shuffle toggle" 
        (icon :path {media.shuffle == true ? "./icons/shuffle.svg" : "./icons/arrow-transfer-01.svg"})
      )
      (button :class "button media-button repeat ${media.loop}"
              :onclick "scripts/cycle-loop"
        (icon :path {media.loop == "Track" ? "./icons/repeate-one.svg" : 
                     media.loop == "Playlist" ? "./icons/repeat-music.svg" : 
                     "./icons/arrow-right-04.svg"})
      )
    )
    
    ;; Empty in the middle
    (box :orientation "v" :vexpand true :valign "start")
    
    ;; System stats at the bottom
    (box :class "system-stats" :orientation "v" :spacing 0 :space-evenly false
      ;; Volume
      (box :class "stat-item" :orientation "v"
        (icon :path {volume.status == "Muted" ? "./icons/volume-cross.svg" :
                   volume.percentage > 66 ? "./icons/volume-high.svg" :
                   volume.percentage > 33 ? "./icons/volume-low-1.svg" :
                   volume.percentage > 0  ? "./icons/volume-mute.svg" :
                   "./icons/volume-cross.svg"})
        (label :text "${volume.percentage == 100 ? "Fu" : volume.percentage}")
      )
      
      ;; Wifi
      (button :class "button stat-item" :onclick "scripts/toggle-window wifi_list_window"
        (box :orientation "v"
          (icon :path "./icons/wifi-square.svg")
          (label :text "${substring(wifi, 0, 2)}")
        )
      )
      
      ;; Battery
      (button :onclick "scripts/toggle-window power_window" :class "button stat-item"
        (box :orientation "v"
          (icon :path {battery.status == "Charging" ? "./icons/battery-charging.svg" :
            battery.capacity > 80 ? "./icons/battery-full.svg" :
            battery.capacity > 40 ? "./icons/battery-2bars.svg" :
            battery.capacity > 30 ? "./icons/battery-empty-1.svg" :
            battery.capacity > 10 ? "./icons/battery-empty.svg" :
            "./icons/battery-disable.svg"})
          ; Show battery capacity
          (label :text "${battery.capacity}")
        )
      )
      
      ;; Time
      (button :class "button stat-item" :onclick "scripts/toggle-window date_window"
        (box :orientation "v"
          (icon :path "./icons/clock.svg")
          (label :text "${hour}")
          (label :text "${minuet}")
        )
      )
    )
  )
)

(include "popup/popup.yuck")
(include "osd/osd.yuck")
